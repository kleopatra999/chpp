#include list.chh
\
%define(snumberp, x,
    %let(result, %smatch(%'^-?[0-9]+$',%x),
         %[result != -1]))\
\
%define(lrest, l,
    %ldelete(%&l,0)\
    %l)\
\
%define(llast, l,
    %l[%[%llength(%&l) - 1]])\
\
%define(lbutlast, l,
    %ldelete(%&l, %[%llength(%&l) - 1])\
    %l)\
\
%define(lprepend, x, l,
    %linsert(%&l, 0, %&x)\
    %l)\
\
%define(lmappend, f, l,
    %let(result, %list(),
    	 %foreach(x, %&l,
	 	  %let(ys, %f(%&x),
		       %foreach(y, %&ys,
		       		%lappend(%&result, %&y))))\
	 %&result))\
\
%define(hzip, ks, vs,
    %let(h, %hash(),
        %for(i, 0, %[%llength(%&ks) - 1],
	     %<h{%ks[%i]}=%vs[%i]>)\
	%h))\
\
%<scmGlobal=%hash()>\
%<scmSpecial=%hash()>\
\
%define(scmLookup, env, x,
    %for(i, %[%llength(%&env) - 1], 0, -1,
    	 %let(h, %env[%i],
	      %if(%hcontains(%&h, %x),
	          %h{%x}%return())))\
    %scmGlobal{%x}
)\
\
%define(scmMakeEnv, env, names, vals,
    %lappend(%&env, %hzip(%&names, %&vals))\
    %env)\
\
%define(scmEval, code, env,
    %case(%typeof(%&code),
          %list(lambda, built-in), %code,
	  %list(scalar), %if(%snumberp(%code),
			     %code,
			     %scmLookup(%&env, %code)),
          %list(list), %let(first, %code[0],
	  	       	    %if(%hcontains(%&scmSpecial, %first),
			        %apply(%scmSpecial{%first}, %lprepend(%&env, %lrest(%code))),
				%let(evaled, %listMap(%lambda(c, %scmEval(%c, %&env)), %&code),
				     func, %evaled[0],
				     %ldelete(%&evaled, 0)\
				     %apply(%func, %&evaled))))))\
\
%define(scmPrint, x,
    %case(%typeof(%&x),
	  %list(lambda, built-in), <function>,
	  %list(scalar), %x,
          %list(list), %'('%listJoin(%' ', %listMap(%scmPrint, %&x))%')'))\
\
%<scmSpecial{quote}=%lambda(e, x, %x)>\
%<scmSpecial{lambda}=%lambda(env, args::,
			     %let(argnames, %lbutlast(%args),
				  body, %llast(%&args),
				  %lambda(fargs::,
					  %let(newenv, %scmMakeEnv(%env, %&argnames, %&fargs),
					       %scmEval(%&body, %&newenv)))))>\
%<scmSpecial{define}=%lambda(env, name, val,
			     %let(evaled, %scmEval(%&val, %&env),
			          %<scmGlobal{%name}=%&evaled>\
				  %evaled))>\
\
%<scmGlobal{list}=%list>\
\
%define(scmTokenize, str,
    %lmappend(%lambda(s, %stokenize(%'[()]|[^()]+', %s)),
    	      %ssplit(%'[ \t\n]+', %str)))\
\
%define(scmParse, tokens, i, )\
%define(scmParseList, tokens, i,
    %let(result, %list(),
        %while(%not(%equal(%tokens[%i], %')')),
	       %let(r, %scmParse(%&tokens, %i),
	       	    x, %r[0],
		    newi, %r[1],
		    %lappend(%&result, %&x)\
		    %<i=%newi>))\
	%list(%&result, %[i+1])))\
\
%define(scmParse, tokens, i,
    %let(t, %tokens[%i],
    	 %if(%equal(%t, %'('),
	     %scmParseList(%&tokens, %[i+1]),
	     %list(%t, %[i+1]))))\
\
%define(scmRead, str,
    %let(tokens, %scmTokenize(%str),
    	 result, %scmParse(%&tokens, 0),
	 %result[0]))\
\
%scmPrint(%scmEval(%scmRead(%'123'), %list()))
%scmPrint(%scmEval(%scmRead(%'(list 1 2 3)'), %list()))
%scmPrint(%scmEval(%scmRead(%'(quote (list 1 2 3))'), %list()))
%scmPrint(%scmEval(%scmRead(%'((lambda x x) 123)'), %list()))
%scmPrint(%scmEval(%scmRead(%'((lambda x y (list y x)) 1 2)'), %list()))
%scmPrint(%scmEval(%scmRead(%'(define num 123)'), %list()))
%scmPrint(%scmEval(%scmRead(%'num'), %list()))
