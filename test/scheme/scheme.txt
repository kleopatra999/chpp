#include strings.chh
#include list.chh
#include hash.chh
\
%<scmGlobal=%hash()>\
%<scmSpecial=%hash()>\
\
%define(scmLookup, env, x,
    %for(i, %[%llength(%&env) - 1], 0, -1,
    	 %let(h, %env[%i],
	      %if(%hcontains(%&h, %x),
	          %h{%x}%return())))\
    %scmGlobal{%x}
)\
\
%define(scmMakeEnv, env, names, vals,
    %lappend(%&env, %hashZip(%&names, %&vals))\
    %env)\
\
%define(scmEval, code, env,
    %case(%typeof(%&code),
          %list(lambda, built-in), %code,
	  %list(scalar), %if(%snumberp(%code),
			     %code,
			     %scmLookup(%&env, %code)),
          %list(list), %let(first, %code[0],
	  	       	    %if(%hcontains(%&scmSpecial, %first),
			        %apply(%scmSpecial{%first}, %listPrepend(%&env, %listRest(%code))),
				%let(evaled, %listMap(%lambda(c, %scmEval(%c, %&env)), %&code),
				     func, %evaled[0],
				     %ldelete(%&evaled, 0)\
				     %apply(%func, %&evaled))))))\
\
%define(scmPrint, x,
    %case(%typeof(%&x),
	  %list(lambda, built-in), %'#<function>',
	  %list(scalar), %x,
          %list(list), %'('%listJoin(%' ', %listMap(%scmPrint, %&x))%')'))\
\
%<scmSpecial{quote}=%lambda(e, x, %x)>\
%<scmSpecial{lambda}=%lambda(env, argnames, body,
			     %lambda(fargs::,
				     %let(newenv, %scmMakeEnv(%env, %&argnames, %&fargs),
					  %scmEval(%&body, %&newenv))))>\
%<scmSpecial{define}=%lambda(env, name, val,
			     %let(evaled, %scmEval(%&val, %&env),
			          %<scmGlobal{%name}=%&evaled>\
				  %evaled))>\
\
%<scmGlobal{list}=%list>\
%<scmGlobal{first}=%lambda(l, %l[0])>\
%<scmGlobal{rest}=%lambda(l, %listRest(%l))>\
\
%define(scmTokenize, str,
    %listMappend(%lambda(s, %stokenize(%'[()]|[^()]+', %s)),
    		 %ssplit(%'[ \t\n]+', %str)))\
\
%define(scmParse, tokens, i, )\
%define(scmParseList, tokens, i,
    %let(result, %list(),
        %while(%not(%equal(%tokens[%i], %')')),
	       %let(r, %scmParse(%&tokens, %i),
	       	    x, %r[0],
		    newi, %r[1],
		    %lappend(%&result, %&x)\
		    %<i=%newi>))\
	%list(%&result, %[i+1])))\
\
%define(scmParse, tokens, i,
    %let(t, %tokens[%i],
    	 %if(%equal(%t, %'('),
	     %scmParseList(%&tokens, %[i+1]),
	     %list(%t, %[i+1]))))\
\
%define(scmRead, str,
    %let(tokens, %scmTokenize(%str),
    	 result, %scmParse(%&tokens, 0),
	 %result[0]))\
\
%define(scmTest, str, expected,
    %let(result, %scmPrint(%scmEval(%scmRead(%str), %list())),
         %if(%not(%equal(%result, %expected)),
	     %warning(Test failed: %str gave result %result expected %expected))))\
\
%scmTest(%'123', %'123')\
%scmTest(%'(list 1 2 3)', %'(1 2 3)')\
%scmTest(%'(quote (list 1 2 3))', %'(list 1 2 3)')\
%scmTest(%'((lambda (x) x) 123)', %'123')\
%scmTest(%'((lambda (x y) (list y x)) 1 2)', %'(2 1)')\
%scmTest(%'(define num 123)', %'123')\
%scmTest(%'num', %'123')\
%scmTest(%'(first (quote (1 2 3)))', %'1')\
%scmTest(%'(rest (quote (1 2 3)))', %'(2 3)')\
